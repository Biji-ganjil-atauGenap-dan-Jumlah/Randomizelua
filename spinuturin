bot = getBot()
world = bot:getWorld()
inventory = bot:getInventory()
userings = {}
splicer = {}
str1 = {}
str2 = {}
tileSplice = {}
statusWorld = {}
waktu = {}
foss = {}
firstSeedId = Bots[getBot().name:upper()].firstSeedId
secondSeedId = Bots[getBot().name:upper()].secondSeedId
looping = Bots[getBot().name:upper()].looping
splice5tree = Bots[getBot().name:upper()].splice5tree
worldSplice = Bots[getBot().name:upper()].worldSplice
worldSpliceId = Bots[getBot().name:upper()].worldSpliceId
modeStorage = Bots[getBot().name:upper()].modeStorage
worldFirstStorage = Bots[getBot().name:upper()].worldFirstStorage
worldFirstStorageId = Bots[getBot().name:upper()].worldFirstStorageId
worldSecondStorage = Bots[getBot().name:upper()].worldSecondStorage
worldSecondStorageId = Bots[getBot().name:upper()].worldSecondStorageId
URLwebhook = Bots[getBot().name:upper()].URLwebhook
messageId = Bots[getBot().name:upper()].messageId
stop = #Bots[getBot().name:upper()].worldSplice
lastFirst = #Bots[getBot().name:upper()].worldFirstStorage
lastSecond = #Bots[getBot().name:upper()].worldSecondStorage
getLastFirst = worldFirstStorage[lastFirst]
getLastSecond = worldSecondStorage[lastSecond]
spliceRange = 5
nuked = false
loopIngfo = ""
splcIngfo = ""
loopz = 0
skipFarm = 1
resetTime = false
qepwi8uzoBOd1rpkc28FWccXTvK450p533EKyBbuaPUOBhcuVEFQh6DAzPkcvHtzIqJVwQkr1YtskatcMQVHno4idgRdcWDuGs0kcnrgpXw5LOJUvDP6HWOdboKsle3p =
    LG1xLhKZE3H1WXfNxdjMdMPHsztmFVJeMkOONL3q0HwaWijwSz2J0nggvfg74GgF6PcFG4V2nNjapTywZCBrCFWSgzPTgte84ozR5RmCRyRInnJ5RuWHtJHkxgl1XIZ6tOGb014CyxdghKHFKBy3GWPCWMqY7LoBZZFlZv6S0ld29Q3ZK2qjHYaxhNgm1nfxoyLIX2ZctRhpVtWD3yrfcVc1dRNJVzhPN3dT2GBRWrH47MMx93MVUtEwdJjANTYMWrHg01aBI5kwqz0C6pjcBwAbBovLlpy86KpX65Aat5af2fUXst9iCocYCJnkQcW2
function getBotStatus()
    if getBot().status == 0 then
        return "Offline"
    elseif getBot().status == 1 then
        return "Online"
    elseif getBot().status == 2 then
        return "WrongPassID"
    elseif getBot().status == 3 then
        return "Banned"
    elseif getBot().status == 4 then
        return "BannedLocation"
    elseif getBot().status == 5 then
        return "UpdateVersion"
    elseif getBot().status == 6 then
        return "AAP"
    elseif getBot().status == 7 then
        return "Overload"
    elseif getBot().status == 8 then
        return "TooManyLogin"
    elseif getBot().status == 9 then
        return "Maintenance"
    elseif getBot().status == 10 then
        return "ServerBusy"
    elseif getBot().status == 11 then
        return "GuestLimit"
    elseif getBot().status == 12 then
        return "HttpBlock"
    elseif getBot().status == 13 then
        return "BadNameLength"
    elseif getBot().status == 14 then
        return "InvalidAccount"
    elseif getBot().status == 15 then
        return "Ercon"
    elseif getBot().status == 16 then
        return "LoginFail"
    elseif getBot().status == 17 then
        return "CaptchaLink"
    elseif getBot().status == 18 then
        return "ModEntered"
    elseif getBot().status == 19 then
        return "HighLoad"
    else
        return "Unknown"
    end
end
for i = skipFarm, #worldSplice do
    table.insert(splicer, worldSplice[i])
end
for i = 1, #qepwi8uzoBOd1rpkc28FWccXTvK450p533EKyBbuaPUOBhcuVEFQh6DAzPkcvHtzIqJVwQkr1YtskatcMQVHno4idgRdcWDuGs0kcnrgpXw5LOJUvDP6HWOdboKsle3p do
    table.insert(userings,
        qepwi8uzoBOd1rpkc28FWccXTvK450p533EKyBbuaPUOBhcuVEFQh6DAzPkcvHtzIqJVwQkr1YtskatcMQVHno4idgRdcWDuGs0kcnrgpXw5LOJUvDP6HWOdboKsle3p[i])
end
for i = 1, #worldFirstStorage do
    table.insert(str1, worldFirstStorage[i])
end
for i = 1, #worldSecondStorage do
    table.insert(str2, worldSecondStorage[i])
end
for i = math.floor(spliceRange / 2), 1, -1 do
    i = i * -1
    table.insert(tileSplice, i)
end
for i = 0, math.ceil(spliceRange / 2) - 1 do
    table.insert(tileSplice, i)
end
function tileSplicer1(x, y)
    for _, num in pairs(tileSplice) do
        if world:getTile(x + num, y).fg == 0 and world:getTile(x + num, y).bg == 0 then
            return true
        end
    end
    return false
end
function tileSplicer2(x, y)
    for _, num in pairs(tileSplice) do
        if world:getTile(x + num, y).fg ~= 0 or world:getTile(x + num, y).bg ~= 0 then
            return true
        end
    end
    return false
end
addEvent(Event.variantlist, function(variant, netid)
    if variant:get(0):getString() == "OnConsoleMessage" then
        if variant:get(1):getString():find("That world is inaccessible") or
            variant:get(1):getString():lower():find("level ") then
            nuked = true
        end
    end
end)
function checkBlock(tile)
    local tempTile = world:getTile(tile.x, tile.y + 1)
    if not tempTile.fg then
        return false
    end
    local collision = getInfo(tempTile.fg).collision_type
    return tempTile and (collision == 1 or collision == 2 or collision == 3)
end
function checkIn1()
    local count = 0
    for _, tile in pairs(world:getTiles()) do
        if tile.fg == 0 and checkBlock(world:getTile(tile.x, tile.y)) and world:hasAccess(tile.x, tile.y) ~= 0 then
            count = count + 1
        end
    end
    return count
end
function checkIn2()
    local count = 0
    for _, tile in pairs(world:getTiles()) do
        if tile.fg == firstSeedId and world:hasAccess(tile.x, tile.y) ~= 0 and not tile:canHarvest() and
            checkBlock(world:getTile(tile.x, tile.y)) then
            count = count + 1
        end
    end
    return count
end
function reconnect(wqrld, id, x, y)
    if bot.status ~= 1 then
        hookInfo("Reconnecting")
        sleep(100)
        while bot.status ~= 1 do
            bot:connect()
            sleep(delayReconnect)
            if bot.status == 3 or bot.status == 4 then
                hookInfo("Bot got banned, going to remove bot")
                sleep(100)
                removeBot(bot.name:upper())
            end
        end
        sleep(100)
        warping(wqrld, id)
        sleep(100)
        if x and y then
            while not bot:isInTile(x, y) do
                bot:findPath(x, y)
                sleep(100)
            end
        end
        hookInfo("Reconnected")
        sleep(100)
    end
end
function warping(w, wid)
    while not bot:isInWorld(w) and not nuked do
        while bot.status ~= 1 do
            bot:connect()
            sleep(delayReconnect)
            if bot.status == 3 or bot.status == 4 then
                hookInfo("Bot got banned, going to remove bot")
                sleep(200)
                removeBot(bot.name:upper())
            end
        end
        bot:sendPacket(3, "action|join_request\nname|" .. w .. "|" .. wid .. "\ninvitedWorld|0")
        sleep(delayJoinWorld)
        bot:sendPacket(3, "action|join_request\nname|" .. w .. "|" .. wid .. "\ninvitedWorld|0")
        listenEvents(delayJoinWorld / 1000)
    end
    if wid ~= "" then
        while not bot:isInWorld(w) or world:getTile(bot.x, bot.y).fg == 6 do
            bot:sendPacket(3, "action|join_request\nname|" .. w .. "|" .. wid .. "\ninvitedWorld|0")
            sleep(delayJoinWorld)
            bot:sendPacket(3, "action|join_request\nname|" .. w .. "|" .. wid .. "\ninvitedWorld|0")
            sleep(delayJoinWorld)
        end
    end
end
function scanFloatFirst()
    local float = 0
    for _, obj in pairs(world:getObjects()) do
        if obj.id == firstSeedId then
            float = float + obj.count
        end
    end
    return float
end
function scanFloatSecond()
    local float = 0
    for _, obj in pairs(world:getObjects()) do
        if obj.id == secondSeedId then
            float = float + obj.count
        end
    end
    return float
end
function fossi(list)
    local m = 0
    foss[list] = 0
    for _, til in pairs(getBot():getWorld():getTiles()) do
        if til.fg == 3918 then
            m = m + 1
            foss[list] = m
        end
    end
    return m
end
function lastDrop()
    if modeStorage == "same" then
        for _, wTake in pairs(str1) do
            if inventory:getItemCount(firstSeedId) > 0 then
                warping(wTake, worldFirstStorageId)
                sleep(100)
                while inventory:getItemCount(firstSeedId) > 0 do
                    checkUP = world:getTile(bot.x, bot.y - 1).fg ~= 0
                    if checkUP then
                        bot:moveRight()
                    else
                        bot:moveUp()
                    end
                    bot:setDirection()
                    sleep(100)
                    bot:drop(firstSeedId, inventory:getItemCount(firstSeedId))
                end
            end
            if inventory:getItemCount(secondSeedId) > 0 then
                warping(wTake, worldFirstStorageId)
                sleep(100)
                while inventory:getItemCount(secondSeedId) > 0 do
                    checkUP = world:getTile(bot.x, bot.y - 1).fg ~= 0
                    if checkUP then
                        bot:moveRight()
                    else
                        bot:moveUp()
                    end
                    bot:setDirection()
                    sleep(100)
                    bot:drop(secondSeedId, inventory:getItemCount(secondSeedId))
                end
            end
        end
    elseif modeStorage == "diff" then
        for _, wTake1 in pairs(str1) do
            if inventory:getItemCount(firstSeedId) > 0 then
                warping(wTake1, worldFirstStorageId)
                sleep(100)
                while inventory:getItemCount(firstSeedId) > 0 do
                    checkUP = world:getTile(bot.x, bot.y - 1).fg ~= 0
                    if checkUP then
                        bot:moveRight()
                    else
                        bot:moveUp()
                    end
                    bot:setDirection()
                    sleep(100)
                    bot:drop(firstSeedId, inventory:getItemCount(firstSeedId))
                end
            end
        end
        for _, wTake2 in pairs(str2) do
            if inventory:getItemCount(secondSeedId) > 0 then
                warping(wTake2, worldFirstStorageId)
                sleep(100)
                while inventory:getItemCount(secondSeedId) > 0 do
                    checkUP = world:getTile(bot.x, bot.y - 1).fg ~= 0
                    if checkUP then
                        bot:moveRight()
                    else
                        bot:moveUp()
                    end
                    bot:setDirection()
                    sleep(100)
                    bot:drop(secondSeedId, inventory:getItemCount(secondSeedId))
                end
            end
        end
    end
end
function hookInfo(infox)
    if webhookActive and typeWebhook == "spam" then
        local botGrowId = "**||" .. getBot().name .. "||**"
        local botStatus = "**" .. getBotStatus() .. "(" .. getBot():getPing() .. ")**"
        local botTask = "**" .. infox .. "(||" .. getBot():getWorld().name .. "||)**"
        wh = Webhook.new(URLwebhook)
        wh.content = "<@" .. userTagId .. ">"
        wh.embed1.use = true
        wh.embed1.color = math.random(0000000, 9999999)
        wh.embed1.author.name = "Script Splice by Aporia Store"
        wh.embed1.author.url = "https://discord.gg/cm3Bs8NxGk"
        wh.embed1.footer.text = "Last Updated: " .. (os.date("!%a, %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60)) ..
                                    ""
        wh.embed1.image =
            "https://cdn.discordapp.com/attachments/1173193705071595580/1173251750845755484/APORIA-STORE_discord_gg_sV6feyFX5U.gif?ex=656346d7&is=6550d1d7&hm=efc6b993edee5bedeb5b7614ba5b97d9f79d01a4d2d26b51eaae4e04d936b985&"
        wh.embed1:addField("<:downloadremovebgpreview1:1103285738088443926>Bot GrowID", botGrowId, true)
        wh.embed1:addField("<:emoji101:1035821144068071484> Bot Status(Ping)", botStatus, true)
        wh.embed1:addField("<:sc:1034751373041999872> Bot Task(World)", botTask, true)
        wh.embed1:addField("<:wold:909756145202233355> WORLD SECTION [world|(hour:min)|status|fossil] loop: " ..
                               loopIngfo .. "", "```" .. splcIngfo .. "```", false)
        wh:send()
    elseif webhookActive and typeWebhook == "edit" then
        local botGrowId = "**||" .. getBot().name .. "||**"
        local botStatus = "**" .. getBotStatus() .. "(" .. getBot():getPing() .. ")**"
        local botTask = "**" .. infox .. "(||" .. getBot():getWorld().name .. "||)**"
        wh = Webhook.new(URLwebhook .. "/messages/" .. messageId)
        wh.content = "<@" .. userTagId .. ">"
        wh.embed1.use = true
        wh.embed1.color = math.random(0000000, 9999999)
        wh.embed1.author.name = "Script Splice by Aporia Store"
        wh.embed1.author.url = "https://discord.gg/cm3Bs8NxGk"
        wh.embed1.footer.text = "Last Updated: " .. (os.date("!%a, %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60)) ..
                                    ""
        wh.embed1.image =
            "https://cdn.discordapp.com/attachments/1173193705071595580/1173251750845755484/APORIA-STORE_discord_gg_sV6feyFX5U.gif?ex=656346d7&is=6550d1d7&hm=efc6b993edee5bedeb5b7614ba5b97d9f79d01a4d2d26b51eaae4e04d936b985&"
        wh.embed1:addField("<:downloadremovebgpreview1:1103285738088443926>Bot GrowID", botGrowId, true)
        wh.embed1:addField("<:emoji101:1035821144068071484> Bot Status(Ping)", botStatus, true)
        wh.embed1:addField("<:sc:1034751373041999872> Bot Task(World)", botTask, true)
        wh.embed1:addField("<:wold:909756145202233355> WORLD SECTION [world|(hour:min)|status|fossil] loop: " ..
                               loopIngfo .. "", "```" .. splcIngfo .. "```", false)
        wh:send()
    end
end
function detecting()
    wh = Webhook.new(URLwebhook)
    wh.content = "<@" .. userTagId .. ">"
    wh.embed1.use = true
    wh.embed1.color = 16711680
    wh.embed1.title = "**:bangbang: ERROR :bangbang:**"
    wh.embed1.description =
        "\n**<:gtExclamation:1181881548501434478> ILLEGAL ACTIVITY DETECTED <:gtExclamation:1181881548501434478>\nIF YOU SEE THIS, PLEASE CONTACT THE PERSON ON BELOW\n<:discord:1181886459343548446>(owner): dypn\n<:discord:1181886459343548446>(co-owner): hainenotfound**"
    wh.embed1.author.name = "Script Made from Aporia Store"
    wh.embed1.author.url = "https://discord.gg/cm3Bs8NxGk"
    wh:send()
end
function loopInfo()
    loopIngfo = ""
    if not looping then
        loopIngfo = loopIngfo .. "**False**"
    else
        loopIngfo = loopIngfo .. "**" .. loopz .. " loop**"
    end
end
function timeLapse()
    splcIngfo = ""
    if censorWorld then
        for _, wirld in pairs(splicer) do
            local cen = string.upper(wirld)
            if cen then
                local sor = string.sub(cen, 1, censorWord)
                if sor then
                    splcIngfo = splcIngfo .. "\n" .. sor .. "|" .. (waktu[cen] or "?") .. "|" ..
                                    (statusWorld[cen] or "?") .. "|" .. (foss[cen] or "0")
                end
            end
        end
    else
        for _, wsrld in pairs(splicer) do
            splcIngfo = splcIngfo .. "\n" .. wsrld:upper() .. "|" .. (waktu[wsrld] or "?") .. "|" ..
                            (statusWorld[wsrld] or "?") .. "|" .. (foss[wsrld] or "0")
        end
    end
end
function taking()
    hookInfo("Taking")
    sleep(100)
    if modeStorage == "same" then
        for _, wTake in pairs(str1) do
            warping(wTake, worldFirstStorageId)
            sleep(100)
            local allScanZero = scanFloatFirst() <= 0 or scanFloatSecond() <= 0
            if scanFloatFirst() > 0 and scanFloatSecond() > 0 then
                for _, obj in pairs(world:getObjects()) do
                    if obj.id == firstSeedId then
                        while not bot:isInTile(math.floor(obj.x / 32), math.floor(obj.y / 32)) and
                            inventory:getItemCount(firstSeedId) <= 0 do
                            bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                            sleep(100)
                            reconnect(wTake, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        while inventory:getItemCount(firstSeedId) <= 0 do
                            bot:collectObject(obj.oid, 10)
                            sleep(100)
                            reconnect(wTake, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                    end
                    if obj.id == secondSeedId then
                        while not bot:isInTile(math.floor(obj.x / 32), math.floor(obj.y / 32)) and
                            inventory:getItemCount(secondSeedId) <= 0 do
                            bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                            sleep(100)
                            reconnect(wTake, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        while inventory:getItemCount(secondSeedId) <= 0 do
                            bot:collectObject(obj.oid, 10)
                            sleep(100)
                            reconnect(wTake, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                    end
                    if inventory:getItemCount(firstSeedId) > 0 and inventory:getItemCount(secondSeedId) > 0 then
                        break
                    end
                end
                if inventory:getItemCount(firstSeedId) > 0 and inventory:getItemCount(secondSeedId) > 0 then
                    break
                end
            elseif wTake == getLastFirst and allScanZero then
                hookInfo("Out of stock in one of the seeds, Going to stop Bot")
                sleep(100)
                lastDrop()
                sleep(100)
                bot:leaveWorld()
                sleep(100)
                bot:stopScript()
            end
        end
    elseif modeStorage == "diff" then
        for _, wTake1 in pairs(str1) do
            warping(wTake1, worldFirstStorageId)
            sleep(100)
            if scanFloatFirst() > 0 then
                for _, obj in pairs(world:getObjects()) do
                    if obj.id == firstSeedId then
                        while not bot:isInTile(math.floor(obj.x / 32), math.floor(obj.y / 32)) and
                            inventory:getItemCount(firstSeedId) <= 0 do
                            bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                            sleep(100)
                            reconnect(wTake1, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        while inventory:getItemCount(firstSeedId) <= 0 do
                            bot:collectObject(obj.oid, 10)
                            sleep(100)
                            reconnect(wTake1, worldFirstStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        if inventory:getItemCount(firstSeedId) > 0 then
                            break
                        end
                    end
                    if inventory:getItemCount(firstSeedId) > 0 then
                        break
                    end
                end
                if inventory:getItemCount(firstSeedId) > 0 then
                    break
                end
            elseif wTake1 == getLastFirst and scanFloatFirst() <= 0 then
                hookInfo("Out of stock at 1st seed, going to stop Bot")
                sleep(100)
                lastDrop()
                sleep(100)
                bot:leaveWorld()
                sleep(100)
                bot:stopScript()
            end
        end
        for _, wTake2 in pairs(str2) do
            warping(wTake2, worldSecondStorageId)
            sleep(100)
            if scanFloatSecond() > 0 then
                for _, obj in pairs(world:getObjects()) do
                    if obj.id == secondSeedId then
                        while not bot:isInTile(math.floor(obj.x / 32), math.floor(obj.y / 32)) and
                            inventory:getItemCount(secondSeedId) <= 0 do
                            bot:findPath(math.floor(obj.x / 32), math.floor(obj.y / 32))
                            sleep(100)
                            reconnect(wTake2, worldSecondStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        while inventory:getItemCount(secondSeedId) <= 0 do
                            bot:collectObject(obj.oid, 10)
                            sleep(100)
                            reconnect(wTake2, worldSecondStorageId, math.floor(obj.x / 32), math.floor(obj.y / 32))
                        end
                        if inventory:getItemCount(secondSeedId) > 0 then
                            break
                        end
                    end
                    if inventory:getItemCount(secondSeedId) > 0 then
                        break
                    end
                end
                if inventory:getItemCount(secondSeedId) > 0 then
                    break
                end
            elseif wTake2 == getLastSecond and scanFloatSecond() <= 0 then
                hookInfo("Out of stock at 2nd seed, going to stop Bot")
                sleep(100)
                lastDrop()
                sleep(100)
                bot:leaveWorld()
                sleep(100)
                bot:stopScript()
            end
        end
    end
end
function splicing(list)
    hookInfo("Splicing")
    sleep(100)
    bot.auto_collect = false
    for _, tile in pairs(world:getTiles()) do
        if splice5tree then
            if tile.fg == 0 and 0 ~= world:getTile(tile.x, tile.y + 1).fg and world:getTile(tile.x, tile.y).fg ~= seedId and
                world:getTile(tile.x, tile.y + 1).fg ~= seedId and world:hasAccess(tile.x, tile.y) ~= 0 and
                checkBlock(world:getTile(tile.x, tile.y)) then
                local check = getTile(tile.x + 2, tile.y)
                if check.fg == 0 then
                    while not bot:isInTile(tile.x + 2, tile.y) do
                        bot:findPath(tile.x + 2, tile.y)
                        sleep(100)
                        reconnect(list, worldSpliceId, tile.x, tile.y)
                    end
                    if tileSplicer1(bot.x, bot.y) then
                        for _, i in pairs(tileSplice) do
                            if not tile:hasFlag(4096) and 0 ~= world:getTile(bot.x + i, bot.y + 1).fg and
                                world:getTile(bot.x + i, bot.y).fg ~= seedId and world:getTile(bot.x + i, bot.y + 1).fg ~=
                                seedId and world:hasAccess(bot.x + i, bot.y) ~= 0 and
                                checkBlock(world:getTile(bot.x + i, bot.y)) then
                                bot:place(bot.x + i, bot.y, firstSeedId)
                                sleep(delayFirstSeedSplice)
                                reconnect(list, worldSpliceId, tile.x, tile.y)
                            end
                        end
                    end
                else
                    while not bot:isInTile(tile.x, tile.y) and not tile:hasFlag(4096) do
                        bot:findPath(tile.x, tile.y)
                        sleep(100)
                        reconnect(list, worldSpliceId, tile.x, tile.y)
                    end
                    while not tile:hasFlag(4096) and tile.fg == 0 and 0 ~= world:getTile(tile.x, tile.y + 1).fg and
                        world:getTile(tile.x, tile.y).fg ~= seedId and world:getTile(tile.x, tile.y + 1).fg ~= seedId and
                        world:hasAccess(tile.x, tile.y) ~= 0 and checkBlock(world:getTile(tile.x, tile.y)) do
                        bot:place(bot.x, bot.y, firstSeedId)
                        sleep(delayFirstSeedSplice)
                        reconnect(list, worldPlantId, tile.x, tile.y)
                    end
                end
            end
            if tile.fg == firstSeedId and not tile:canHarvest() and world:hasAccess(tile.x, tile.y) ~= 0 and
                checkBlock(world:getTile(tile.x, tile.y)) then
                local check2 = getTile(tile.x + 2, tile.y)
                if check2.fg == firstSeedId then
                    while not bot:isInTile(tile.x + 2, tile.y) do
                        bot:findPath(tile.x + 2, tile.y)
                        sleep(100)
                        reconnect(list, worldSpliceId, tile.x, tile.y)
                    end
                    if tileSplicer2(bot.x, bot.y) then
                        for _, i in pairs(tileSplice) do
                            if not tile:hasFlag(4096) and world:getTile(bot.x + i, bot.y).fg == firstSeedId and
                                world:hasAccess(bot.x + i, bot.y) ~= 0 and checkBlock(world:getTile(bot.x + i, bot.y)) then
                                bot:place(bot.x + i, bot.y, secondSeedId)
                                sleep(delaySecondSeedSplice)
                                reconnect(list, worldSpliceId, tile.x, tile.y)
                            end
                        end
                    end
                else
                    while not bot:isInTile(tile.x, tile.y) and not tile:hasFlag(4096) do
                        bot:findPath(tile.x, tile.y)
                        sleep(100)
                        reconnect(list, worldSpliceId, tile.x, tile.y)
                    end
                    while not tile:hasFlag(4096) and world:getTile(bot.x, bot.y).fg == firstSeedId and
                        world:hasAccess(bot.x, bot.y) ~= 0 and checkBlock(world:getTile(bot.x, bot.y)) do
                        bot:place(bot.x, bot.y, secondSeedId)
                        sleep(delaySecondSeedSplice)
                        reconnect(list, worldPlantId, tile.x, tile.y)
                    end
                end
            end
            if inventory:getItemCount(firstSeedId) <= 0 and inventory:getItemCount(secondSeedId) > 0 then
                break
            elseif inventory:getItemCount(firstSeedId) > 0 and inventory:getItemCount(secondSeedId) <= 0 then
                break
            elseif inventory:getItemCount(firstSeedId) <= 0 and inventory:getItemCount(secondSeedId) <= 0 then
                break
            end
        else
            if not tile:hasFlag(4096) and tile.fg == 0 and 0 ~= world:getTile(tile.x, tile.y + 1).fg and
                world:getTile(tile.x, tile.y).fg ~= firstSeedId and world:getTile(tile.x, tile.y + 1).fg ~= firstSeedId and
                world:hasAccess(tile.x, tile.y) ~= 0 and checkBlock(world:getTile(tile.x, tile.y)) then
                while not bot:isInTile(tile.x, tile.y) and not tile:hasFlag(4096) do
                    bot:findPath(tile.x, tile.y)
                    sleep(100)
                    reconnect(list, worldSpliceId, tile.x, tile.y)
                end
                while not tile:hasFlag(4096) and 0 == world:getTile(tile.x, tile.y).fg and
                    checkBlock(world:getTile(tile.x, tile.y)) and world:hasAccess(tile.x, tile.y) ~= 0 do
                    bot:place(tile.x, tile.y, firstSeedId)
                    sleep(delayFirstSeedSplice)
                    reconnect(list, worldSpliceId, tile.x, tile.y)
                end
            end
            if not tile:hasFlag(4096) and not tile:canHarvest() and tile.fg == firstSeedId and
                world:hasAccess(tile.x, tile.y) ~= 0 and checkBlock(world:getTile(tile.x, tile.y)) then
                while not bot:isInTile(tile.x, tile.y) and not tile:hasFlag(4096) do
                    bot:findPath(tile.x, tile.y)
                    sleep(100)
                    reconnect(list, worldSpliceId, tile.x, tile.y)
                end
                while not tile:hasFlag(4096) and firstSeedId == world:getTile(tile.x, tile.y).fg and
                    world:hasAccess(tile.x, tile.y) ~= 0 and checkBlock(world:getTile(tile.x, tile.y)) do
                    bot:place(tile.x, tile.y, secondSeedId)
                    sleep(delaySecondSeedSplice)
                    reconnect(list, worldSpliceId, tile.x, tile.y)
                end
            end
            if inventory:getItemCount(firstSeedId) <= 0 and inventory:getItemCount(secondSeedId) > 0 then
                break
            elseif inventory:getItemCount(firstSeedId) > 0 and inventory:getItemCount(secondSeedId) <= 0 then
                break
            elseif inventory:getItemCount(firstSeedId) <= 0 and inventory:getItemCount(secondSeedId) <= 0 then
                break
            end
        end
    end
end
if bot.status ~= 1 then
    bot:connect()
    sleep(delayReconnect)
end
function LockOwner()
    for _, usering in pairs(userings) do
        local user = getUsername()
        local ton = user == usering
        if ton then
            return ton
        end
    end
end
function main()
    for _, usering in pairs(userings) do
        if LockOwner() and AporiaStore == "https://discord.gg/cm3Bs8NxGk" then
            while true do
                for _, splc in pairs(splicer) do
                    if bot.status ~= 1 then
                        bot:connect()
                        sleep(delayReconnect)
                    end
                    timeLapse()
                    sleep(100)
                    loopInfo()
                    sleep(100)
                    warping(splc, worldSpliceId)
                    sleep(100)
                    if not nuked then
                        hookInfo("Starting")
                        sleep(100)
                        tt = os.time()
                        while checkIn1() > 0 or checkIn2() > 0 do
                            while splicing(splc) do
                                splicing(splc)
                            end
                            if inventory:getItemCount(firstSeedId) <= 0 or inventory:getItemCount(secondSeedId) <= 0 then
                                taking()
                            end
                            warping(splc, worldSpliceId)
                            sleep(100)
                        end
                        tt1 = os.time() - tt
                        hookInfo("Finished")
                        waktu[splc] = math.floor(tt1 / 3600) .. ":" .. math.floor(tt1 % 3600 / 60)
                        statusWorld[splc] = "done"
                        sleep(100)
                        fossi(splc)
                    elseif nuked then
                        statusWorld[splc] = "NUKED"
                        nuked = false
                        sleep(delayReconnect * 2)
                    end
                    if skipFarm < stop then
                        skipFarm = skipFarm + 1
                    else
                        if resetTime then
                            waktu = {}
                            statusWorld = {}
                            foss = {}
                        end
                        skipFarm = 1
                        loopz = loopz + 1
                    end
                end
                if not looping then
                    timeLapse()
                    sleep(100)
                    lastDrop()
                    sleep(100)
                    hookInfo("Removing bot")
                    sleep(100)
                    removeBot(bot.name:upper())
                end
            end
        else
            detecting()
            sleep(1000)
            bot:say("?????????")
            sleep(1000)
            bot:stopScript()
            break
        end
    end
end
main()
